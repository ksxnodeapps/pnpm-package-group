// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`program --help 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "$ index.js [options] [arguments]

Options:
  --version            Show version number                             [boolean]
  --local, -l          Directory contains package.json and local packages
                                                      [string] [default: \\"pkgs\\"]
  --pnpm               Program to call                [string] [default: \\"pnpm\\"]
  --shell              Whether shell is used           [boolean] [default: true]
  --quiet-pnpm         Don't print pnpm output        [boolean] [default: false]
  --local-syntax, -L   Syntax to install packages locally
                                     [string] [default: \\"install --save {list}\\"]
  --global-syntax, -G  Syntax to install packages globally
                                   [string] [default: \\"install --global {list}\\"]
  --help               Show help                                       [boolean]

Examples:
  index.js packages.yaml                    Basic use
  index.js --local=local-packages           Specify target directory
  packages.yaml
  index.js packages.yaml/foo/bar            Install only group foo.bar in
                                            packages.yaml
  index.js /abc/def/packages.yaml/foo/bar   Combine filesystem path and json
                                            path
  index.js file1.yaml/foo/bar1              Filter files and groups
  file1.yaml/foo/bar2 file2.yaml/foo/bar1
  file2.yaml/foo/bar2
  index.js *.yaml/foo/{bar1,bar2}           Using blob pattern (UNIX Shell only)

",
}
`;

exports[`program being invoked with neither arguments nor stdin  1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Invalid type of tree
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/invalid-schema.yaml --local=virtual-env/target 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Invalid type of tree
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/invalid-schema.yaml input/invalid-syntax.txt --local=virtual-env/target 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/invalid-schema.yaml input/invalid-syntax.txt without options 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/invalid-schema.yaml without options 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Invalid type of tree
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/invalid-syntax.txt --local=virtual-env/target 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/invalid-syntax.txt without options 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Called fake pnpm with arguments: [ 'install',
  '--global',
  'c',
  'd',
  'f',
  'g',
  'k',
  'n',
  'p',
  't',
  'v',
  'k',
  't',
  'v' ]
LOCAL [ { path: 'Nested/a/', data: [ 'b' ] },
  { path: 'Nested/c/d/', data: [ 'e' ] },
  { path: 'Nested/c/e/', data: [ 'f' ] },
  { path: 'Flat/',
    data: [ 'c', 'd', 'f', 'g', 'k', 'n', 'p', 't', 'v' ] },
  { path: 'DividedFlat/a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'DividedFlat/i/', data: [ 'k', 'n', 'p', 't', 'v' ] },
  { path: 'SelectiveNested/a/b/', data: [ 'c', 'd' ] },
  { path: 'SelectiveNested/a/e/', data: [ 'f', 'g' ] },
  { path: 'SelectiveNested/i/', data: [ 'k', 'n', 'p' ] },
  { path: 'SelectiveNested/i/l/q/r/s/', data: [ 't' ] },
  { path: 'SelectiveNested/i/l/q/u/', data: [ 'v' ] },
  { path: 'Mix/a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'Mix/i/l/m/', data: [ 'n' ] },
  { path: 'Mix/i/l/o/', data: [ 'p' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml input/invalid-schema.yaml --local=virtual-env/target 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Invalid type of tree
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml input/invalid-schema.yaml input/invalid-syntax.txt --local=virtual-env/target 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml input/invalid-schema.yaml input/invalid-syntax.txt without options 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml input/invalid-schema.yaml without options 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Invalid type of tree
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml input/invalid-syntax.txt --local=virtual-env/target 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml input/invalid-syntax.txt without options 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Called fake pnpm with arguments: [ 'install',
  '--global',
  'c',
  'd',
  'f',
  'g',
  'k',
  'n',
  'p',
  't',
  'v',
  'k',
  't',
  'v' ]
LOCAL [ { path: 'Nested/a/', data: [ 'b' ] },
  { path: 'Nested/c/d/', data: [ 'e' ] },
  { path: 'Nested/c/e/', data: [ 'f' ] },
  { path: 'Flat/',
    data: [ 'c', 'd', 'f', 'g', 'k', 'n', 'p', 't', 'v' ] },
  { path: 'DividedFlat/a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'DividedFlat/i/', data: [ 'k', 'n', 'p', 't', 'v' ] },
  { path: 'SelectiveNested/a/b/', data: [ 'c', 'd' ] },
  { path: 'SelectiveNested/a/e/', data: [ 'f', 'g' ] },
  { path: 'SelectiveNested/i/', data: [ 'k', 'n', 'p' ] },
  { path: 'SelectiveNested/i/l/q/r/s/', data: [ 't' ] },
  { path: 'SelectiveNested/i/l/q/u/', data: [ 'v' ] },
  { path: 'Mix/a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'Mix/i/l/m/', data: [ 'n' ] },
  { path: 'Mix/i/l/o/', data: [ 'p' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/DividedFlat --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'i/', data: [ 'k', 'n', 'p', 't', 'v' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/DividedFlat without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'i/', data: [ 'k', 'n', 'p', 't', 'v' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Flat --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: '',
    data: [ 'c', 'd', 'f', 'g', 'k', 'n', 'p', 't', 'v' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Flat without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: '',
    data: [ 'c', 'd', 'f', 'g', 'k', 'n', 'p', 't', 'v' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Flat/i/l --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'm/', data: [ 'n' ] },
  { path: 'o/', data: [ 'p' ] },
  { path: 'q/r/s/', data: [ 't' ] },
  { path: 'q/u/', data: [ 'v' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Flat/i/l without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'm/', data: [ 'n' ] },
  { path: 'o/', data: [ 'p' ] },
  { path: 'q/r/s/', data: [ 't' ] },
  { path: 'q/u/', data: [ 'v' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Global --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Called fake pnpm with arguments: [ 'install', '--global', 'c', 'd', 'f', 'g', 'k', 'n', 'p', 't', 'v' ]
[INFO] No local packages. Skipping.
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Global without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Called fake pnpm with arguments: [ 'install', '--global', 'c', 'd', 'f', 'g', 'k', 'n', 'p', 't', 'v' ]
[INFO] No local packages. Skipping.
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Global/i/l/p --local=virtual-env/target 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Cannot convert undefined or null to object
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml/Global/i/l/p without options 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Cannot convert undefined or null to object
",
  "stdout": "",
}
`;

exports[`program being invoked with paths input/valid.yaml/Nested --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'a/', data: [ 'b' ] },
  { path: 'c/d/', data: [ 'e' ] },
  { path: 'c/e/', data: [ 'f' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Nested without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'a/', data: [ 'b' ] },
  { path: 'c/d/', data: [ 'e' ] },
  { path: 'c/e/', data: [ 'f' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Nested/c --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'd/', data: [ 'e' ] }, { path: 'e/', data: [ 'f' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/Nested/c without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'd/', data: [ 'e' ] }, { path: 'e/', data: [ 'f' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/SelectiveNested --local=virtual-env/target 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'a/b/', data: [ 'c', 'd' ] },
  { path: 'a/e/', data: [ 'f', 'g' ] },
  { path: 'i/', data: [ 'k', 'n', 'p' ] },
  { path: 'i/l/q/r/s/', data: [ 't' ] },
  { path: 'i/l/q/u/', data: [ 'v' ] } ]
",
}
`;

exports[`program being invoked with paths input/valid.yaml/SelectiveNested without options 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "[INFO] No global packages. Skipping.
LOCAL [ { path: 'a/b/', data: [ 'c', 'd' ] },
  { path: 'a/e/', data: [ 'f', 'g' ] },
  { path: 'i/', data: [ 'k', 'n', 'p' ] },
  { path: 'i/l/q/r/s/', data: [ 't' ] },
  { path: 'i/l/q/u/', data: [ 'v' ] } ]
",
}
`;

exports[`program being invoked with stdin which contain invalid syntax 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 9:
    abc: def: ghi
            ^
",
  "stdout": "",
}
`;

exports[`program being invoked with stdin which contain valid syntax and schema 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Called fake pnpm with arguments: [ 'install',
  '--global',
  'c',
  'd',
  'f',
  'g',
  'k',
  'n',
  'p',
  't',
  'v',
  'k',
  't',
  'v' ]
LOCAL [ { path: 'Nested/a/', data: [ 'b' ] },
  { path: 'Nested/c/d/', data: [ 'e' ] },
  { path: 'Nested/c/e/', data: [ 'f' ] },
  { path: 'Flat/',
    data: [ 'c', 'd', 'f', 'g', 'k', 'n', 'p', 't', 'v' ] },
  { path: 'DividedFlat/a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'DividedFlat/i/', data: [ 'k', 'n', 'p', 't', 'v' ] },
  { path: 'SelectiveNested/a/b/', data: [ 'c', 'd' ] },
  { path: 'SelectiveNested/a/e/', data: [ 'f', 'g' ] },
  { path: 'SelectiveNested/i/', data: [ 'k', 'n', 'p' ] },
  { path: 'SelectiveNested/i/l/q/r/s/', data: [ 't' ] },
  { path: 'SelectiveNested/i/l/q/u/', data: [ 'v' ] },
  { path: 'Mix/a/', data: [ 'c', 'd', 'f', 'g' ] },
  { path: 'Mix/i/l/m/', data: [ 'n' ] },
  { path: 'Mix/i/l/o/', data: [ 'p' ] } ]
",
}
`;

exports[`program being invoked with stdin which contain valid syntax but invalid schema 1`] = `
Object {
  "status": 7,
  "stderr": "[ERROR] (schema) Invalid type of tree
",
  "stdout": "",
}
`;
